"""
Controller Realtime Monitoring - Simplified Implementation

This module handles controller realtime monitoring functionality.
"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from keyboards.controller_buttons import get_realtime_monitoring_keyboard, get_controller_back_keyboard
from typing import Dict, Any, List, Optional
from datetime import datetime

# Mock functions to replace utils and database imports
async def get_user_by_telegram_id(telegram_id: int):
    """Mock user data"""
    return {
        'id': 1,
        'telegram_id': telegram_id,
        'role': 'controller',
        'language': 'uz',
        'full_name': 'Test Controller',
        'phone_number': '+998901234567'
    }

async def get_user_lang(telegram_id: int):
    """Mock get user language"""
    return 'uz'

async def get_realtime_data():
    """Mock get realtime data"""
    return {
        'active_applications': 25,
        'pending_applications': 8,
        'in_progress_applications': 12,
        'completed_applications': 5,
        'active_technicians': 15,
        'available_technicians': 8,
        'busy_technicians': 7,
        'avg_response_time': '15 daqiqa',
        'system_uptime': '99.8%',
        'recent_activities': [
            {
                'type': 'new_application',
                'description': 'Yangi internet ulanish arizasi',
                'time': '2 daqiqa oldin',
                'priority': 'high'
            },
            {
                'type': 'technician_assigned',
                'description': 'Texnik tayinlandi - Ariza #12345',
                'time': '5 daqiqa oldin',
                'priority': 'normal'
            },
            {
                'type': 'application_completed',
                'description': 'Ariza bajarildi - #12340',
                'time': '10 daqiqa oldin',
                'priority': 'low'
            }
        ]
    }

def get_realtime_monitoring_router():
    """Router for realtime monitoring functionality"""
    router = Router()

    @router.message(F.text.in_(["üì° Real vaqtda kuzatish", "üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"]))
    async def view_realtime_monitoring(message: Message, state: FSMContext):
        """Controller view realtime monitoring handler"""
        try:
            user = await get_user_by_telegram_id(message.from_user.id)
            if not user or user['role'] != 'controller':
                return
            
            lang = user.get('language', 'uz')
            
            # Get realtime data
            realtime_data = await get_realtime_data()
            
            monitoring_text = (
                "üì° <b>Real vaqtda kuzatish - To'liq ma'lumot</b>\n\n"
                "üìä <b>Joriy holat:</b>\n"
                f"‚Ä¢ Faol arizalar: {realtime_data['active_applications']}\n"
                f"‚Ä¢ Kutilmoqda: {realtime_data['pending_applications']}\n"
                f"‚Ä¢ Jarayonda: {realtime_data['in_progress_applications']}\n"
                f"‚Ä¢ Bajarilgan: {realtime_data['completed_applications']}\n\n"
                f"üë®‚Äçüîß <b>Texniklar:</b>\n"
                f"‚Ä¢ Faol texniklar: {realtime_data['active_technicians']}\n"
                f"‚Ä¢ Mavjud texniklar: {realtime_data['available_technicians']}\n"
                f"‚Ä¢ Band texniklar: {realtime_data['busy_technicians']}\n\n"
                f"‚è∞ <b>O'rtacha javob vaqti:</b> {realtime_data['avg_response_time']}\n"
                f"üñ•Ô∏è <b>Tizim ishlashi:</b> {realtime_data['system_uptime']}\n\n"
                "Quyidagi bo'limlardan birini tanlang:"
                if lang == 'uz' else
                "üì° <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                "üìä <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏: {realtime_data['active_applications']}\n"
                f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ: {realtime_data['pending_applications']}\n"
                f"‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {realtime_data['in_progress_applications']}\n"
                f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {realtime_data['completed_applications']}\n\n"
                f"üë®‚Äçüîß <b>–¢–µ—Ö–Ω–∏–∫–∏:</b>\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: {realtime_data['active_technicians']}\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: {realtime_data['available_technicians']}\n"
                f"‚Ä¢ –ó–∞–Ω—è—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: {realtime_data['busy_technicians']}\n\n"
                f"‚è∞ <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {realtime_data['avg_response_time']}\n"
                f"üñ•Ô∏è <b>–†–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã:</b> {realtime_data['system_uptime']}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∏–∂–µ:"
            )
            
            sent_message = await message.answer(
                text=monitoring_text,
                reply_markup=get_realtime_monitoring_keyboard(lang),
                parse_mode='HTML'
            )
            
        except Exception as e:
            await message.answer("‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.")

    @router.callback_query(F.data == "view_recent_activities")
    async def view_recent_activities(callback: CallbackQuery, state: FSMContext):
        """View recent activities"""
        try:
            await callback.answer()
            
            # Get realtime data
            realtime_data = await get_realtime_data()
            
            activities_text = (
                "üìã <b>So'nggi faolliklar - To'liq ma'lumot</b>\n\n"
            )
            
            # Add recent activities
            for i, activity in enumerate(realtime_data['recent_activities'], 1):
                priority_emoji = {
                    'high': 'üî¥',
                    'normal': 'üü°',
                    'low': 'üü¢'
                }.get(activity['priority'], '‚ö™')
                
                activity_type_emoji = {
                    'new_application': 'üìù',
                    'technician_assigned': 'üë®‚Äçüîß',
                    'application_completed': '‚úÖ',
                    'application_cancelled': '‚ùå'
                }.get(activity['type'], 'üìÑ')
                
                activities_text += (
                    f"{i}. {activity_type_emoji} {activity['description']}\n"
                    f"   {priority_emoji} {activity['time']}\n\n"
                )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è Orqaga", callback_data="back_to_monitoring")]
            ])
            
            await callback.message.edit_text(activities_text, reply_markup=keyboard, parse_mode='HTML')
            
        except Exception as e:
            await callback.answer("‚ùå Xatolik yuz berdi")

    @router.callback_query(F.data == "back_to_monitoring")
    async def back_to_monitoring(callback: CallbackQuery, state: FSMContext):
        """Back to monitoring menu"""
        try:
            await callback.answer()
            
            user = await get_user_by_telegram_id(callback.from_user.id)
            lang = user.get('language', 'uz')
            
            # Get realtime data
            realtime_data = await get_realtime_data()
            
            monitoring_text = (
                "üì° <b>Real vaqtda kuzatish - To'liq ma'lumot</b>\n\n"
                "üìä <b>Joriy holat:</b>\n"
                f"‚Ä¢ Faol arizalar: {realtime_data['active_applications']}\n"
                f"‚Ä¢ Kutilmoqda: {realtime_data['pending_applications']}\n"
                f"‚Ä¢ Jarayonda: {realtime_data['in_progress_applications']}\n"
                f"‚Ä¢ Bajarilgan: {realtime_data['completed_applications']}\n\n"
                f"üë®‚Äçüîß <b>Texniklar:</b>\n"
                f"‚Ä¢ Faol texniklar: {realtime_data['active_technicians']}\n"
                f"‚Ä¢ Mavjud texniklar: {realtime_data['available_technicians']}\n"
                f"‚Ä¢ Band texniklar: {realtime_data['busy_technicians']}\n\n"
                f"‚è∞ <b>O'rtacha javob vaqti:</b> {realtime_data['avg_response_time']}\n"
                f"üñ•Ô∏è <b>Tizim ishlashi:</b> {realtime_data['system_uptime']}\n\n"
                "Quyidagi bo'limlardan birini tanlang:"
                if lang == 'uz' else
                "üì° <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                "üìä <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏: {realtime_data['active_applications']}\n"
                f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ: {realtime_data['pending_applications']}\n"
                f"‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {realtime_data['in_progress_applications']}\n"
                f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {realtime_data['completed_applications']}\n\n"
                f"üë®‚Äçüîß <b>–¢–µ—Ö–Ω–∏–∫–∏:</b>\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: {realtime_data['active_technicians']}\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: {realtime_data['available_technicians']}\n"
                f"‚Ä¢ –ó–∞–Ω—è—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: {realtime_data['busy_technicians']}\n\n"
                f"‚è∞ <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {realtime_data['avg_response_time']}\n"
                f"üñ•Ô∏è <b>–†–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã:</b> {realtime_data['system_uptime']}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∏–∂–µ:"
            )
            
            await callback.message.edit_text(
                text=monitoring_text,
                reply_markup=get_realtime_monitoring_keyboard(lang),
                parse_mode='HTML'
            )
            
        except Exception as e:
            await callback.answer("‚ùå Xatolik yuz berdi")

    return router 