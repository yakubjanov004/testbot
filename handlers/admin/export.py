from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime
from keyboards.admin_buttons import get_admin_main_menu
from states.admin_states import AdminMainMenuStates
from utils.export_utils import create_export_file, get_available_export_types, get_available_export_formats
from filters.role_filter import RoleFilter

def get_admin_export_router():
    """Admin export router"""
    router = Router()
    
    # Apply role filter
    role_filter = RoleFilter("admin")
    router.message.filter(role_filter)
    router.callback_query.filter(role_filter)

    @router.message(F.text.in_(["üì§ Export", "üì§ –≠–∫—Å–ø–æ—Ä—Ç"]))
    async def export_menu_handler(message: Message, state: FSMContext):
        """Export menu handler"""
        try:
            # Get user language
            user_data = await state.get_data()
            lang = user_data.get('lang', 'uz')
            
            export_types = get_available_export_types('admin')
            
            # Export type names
            export_type_names = {
                'uz': {
                    'orders': 'üìë Zayavkalar',
                    'statistics': 'üìä Statistika',
                    'users': 'üë• Foydalanuvchilar',
                    'system': '‚öôÔ∏è Tizim sozlamalari',
                    'logs': 'üìã Tizim loglari'
                },
                'ru': {
                    'orders': 'üìë –ó–∞—è–≤–∫–∏',
                    'statistics': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    'users': 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                    'system': '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                    'logs': 'üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏'
                }
            }
            
            text = "Export qilish\n\nQaysi ma'lumotlarni export qilmoqchisiz?" if lang == 'uz' else "–≠–∫—Å–ø–æ—Ä—Ç\n\n–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?"
            
            # Create inline keyboard for export types
            keyboard = []
            for export_type in export_types:
                keyboard.append([
                    InlineKeyboardButton(
                        text=export_type_names[lang].get(export_type, export_type),
                        callback_data=f"admin_export_{export_type}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton(
                    text="‚óÄÔ∏è Orqaga" if lang == 'uz' else "‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="admin_export_back_main"
                )
            ])
            
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await message.answer(text, reply_markup=markup)
            await state.set_state(AdminMainMenuStates.export_selection)
            
        except Exception as e:
            print(f"Error in admin export handler: {str(e)}")
            await message.answer("‚ùå Xatolik yuz berdi" if lang == 'uz' else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @router.callback_query(F.data.startswith("admin_export_"))
    async def handle_export_selection(callback: CallbackQuery, state: FSMContext):
        """Handle export type selection"""
        try:
            await callback.answer()
            
            # Get user language
            user_data = await state.get_data()
            lang = user_data.get('lang', 'uz')
            
            # Parse callback data
            action = callback.data.replace("admin_export_", "")
            
            # Handle back to main menu
            if action == "back_main":
                await callback.message.delete()
                await callback.message.answer(
                    "üè† Bosh menyu" if lang == 'uz' else "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    reply_markup=get_admin_main_menu(lang)
                )
                await state.set_state(AdminMainMenuStates.main_menu)
                return
            
            # Handle back to export types
            if action == "back_types":
                export_types = get_available_export_types('admin')
                export_type_names = {
                    'uz': {
                        'orders': 'üìë Zayavkalar',
                        'statistics': 'üìä Statistika',
                        'users': 'üë• Foydalanuvchilar',
                        'system': '‚öôÔ∏è Tizim sozlamalari',
                        'logs': 'üìã Tizim loglari'
                    },
                    'ru': {
                        'orders': 'üìë –ó–∞—è–≤–∫–∏',
                        'statistics': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                        'users': 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                        'system': '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                        'logs': 'üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏'
                    }
                }
                
                text = "Export qilish\n\nQaysi ma'lumotlarni export qilmoqchisiz?" if lang == 'uz' else "–≠–∫—Å–ø–æ—Ä—Ç\n\n–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?"
                
                keyboard = []
                for export_type in export_types:
                    keyboard.append([
                        InlineKeyboardButton(
                            text=export_type_names[lang].get(export_type, export_type),
                            callback_data=f"admin_export_{export_type}"
                        )
                    ])
                
                keyboard.append([
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è Orqaga" if lang == 'uz' else "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="admin_export_back_main"
                    )
                ])
                
                markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
                await callback.message.edit_text(text, reply_markup=markup)
                await state.set_state(AdminMainMenuStates.export_selection)
                return
            
            # Check if it's a valid export type
            available_types = get_available_export_types('admin')
            if action not in available_types:
                await callback.answer("‚ùå Noto'g'ri export turi" if lang == 'uz' else "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
                return
            
            # Store selected export type
            await state.update_data(selected_export_type=action)
            
            # Export type names
            export_type_names = {
                'uz': {
                    'orders': 'Zayavkalar',
                    'statistics': 'Statistika',
                    'users': 'Foydalanuvchilar',
                    'system': 'Tizim sozlamalari',
                    'logs': 'Tizim loglari'
                },
                'ru': {
                    'orders': '–ó–∞—è–≤–∫–∏',
                    'statistics': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    'users': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                    'system': '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                    'logs': '–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏'
                }
            }
            
            # Show format selection
            formats = get_available_export_formats()
            text = f"{export_type_names[lang].get(action, action)} export\n\n"
            text += "Qaysi formatda export qilmoqchisiz?\n\n" if lang == 'uz' else "–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?\n\n"
            text += "CSV - Universal format (Excel, Google Sheets)\n" if lang == 'uz' else "CSV - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (Excel, Google Sheets)\n"
            text += "Excel - Microsoft Excel formati\n" if lang == 'uz' else "Excel - –§–æ—Ä–º–∞—Ç Microsoft Excel\n"
            text += "Word - Microsoft Word formati\n" if lang == 'uz' else "Word - –§–æ—Ä–º–∞—Ç Microsoft Word\n"
            text += "PDF - Chop etish uchun qulay format" if lang == 'uz' else "PDF - –£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏"
            
            keyboard = []
            format_icons = {
                'csv': 'CSV',
                'xlsx': 'Excel',
                'docx': 'Word',
                'pdf': 'PDF'
            }
            
            for fmt in formats:
                keyboard.append([
                    InlineKeyboardButton(
                        text=format_icons.get(fmt, fmt.upper()),
                        callback_data=f"admin_format_{fmt}"
                    )
                ])
            
            # Add back button
            keyboard.append([
                InlineKeyboardButton(
                    text="‚óÄÔ∏è Orqaga" if lang == 'uz' else "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_export_back_types"
                )
            ])
            
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await callback.message.edit_text(text, reply_markup=markup)
            await state.set_state(AdminMainMenuStates.export_format_selection)
            
        except Exception as e:
            print(f"Error in export selection: {str(e)}")
            await callback.answer("‚ùå Xatolik yuz berdi" if lang == 'uz' else "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    @router.callback_query(F.data.startswith("admin_format_"))
    async def handle_export_format(callback: CallbackQuery, state: FSMContext):
        """Handle export format selection"""
        try:
            # Get user language
            user_data = await state.get_data()
            lang = user_data.get('lang', 'uz')
            
            # Send loading message
            await callback.answer("üì• Export tayyorlanmoqda..." if lang == 'uz' else "üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...", show_alert=False)
            
            # Delete the inline keyboard
            await callback.message.delete()
            
            # Get format type
            format_type = callback.data.replace("admin_format_", "")
            
            # Get stored data
            export_type = user_data.get('selected_export_type')
            
            if not export_type:
                await callback.message.answer("‚ùå Export turi tanlanmagan" if lang == 'uz' else "‚ùå –¢–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω")
                return
            
            # Export type names
            export_type_names = {
                'uz': {
                    'orders': 'Zayavkalar',
                    'statistics': 'Statistika',
                    'users': 'Foydalanuvchilar',
                    'system': 'Tizim sozlamalari',
                    'logs': 'Tizim loglari'
                },
                'ru': {
                    'orders': '–ó–∞—è–≤–∫–∏',
                    'statistics': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    'users': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                    'system': '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                    'logs': '–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏'
                }
            }
            
            format_names = {
                'csv': 'CSV',
                'xlsx': 'Excel',
                'docx': 'Word',
                'pdf': 'PDF'
            }
            
            # Send processing message
            processing_msg = await callback.message.answer(
                f"‚è≥ {export_type_names[lang].get(export_type, export_type)} ma'lumotlari {format_names.get(format_type, format_type)} formatida tayyorlanmoqda...\n\n"
                f"Iltimos, kuting..." if lang == 'uz' else
                f"‚è≥ –î–∞–Ω–Ω—ã–µ {export_type_names['ru'].get(export_type, export_type)} –≥–æ—Ç–æ–≤—è—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_names.get(format_type, format_type)}...\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            
            try:
                # Create export file
                file_content, filename = create_export_file(export_type, format_type, "admin")
                
                # Get file size
                file_content.seek(0, 2)  # Move to end
                file_size = file_content.tell()
                file_content.seek(0)  # Reset to beginning
                
                # Delete processing message
                await processing_msg.delete()
                
                # Send only the file with all information in caption
                await callback.message.answer_document(
                    BufferedInputFile(
                        file_content.read(),
                        filename=filename
                    ),
                    caption=(
                        f"‚úÖ {export_type_names[lang].get(export_type, export_type)} export muvaffaqiyatli yakunlandi!\n\n"
                        f"üìÑ Fayl nomi: {filename}\n"
                        f"üì¶ Fayl hajmi: {file_size:,} bayt\n"
                        f"üìä Format: {format_names.get(format_type, format_type)}\n"
                        f"üìÖ Sana: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
                        f"Export muvaffaqiyatli yakunlandi!" if lang == 'uz' else
                        f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç {export_type_names['ru'].get(export_type, export_type)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                        f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞: {filename}\n"
                        f"üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç\n"
                        f"üìä –§–æ—Ä–º–∞—Ç: {format_names.get(format_type, format_type)}\n"
                        f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
                        f"–≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
                    ),
                    reply_markup=get_admin_main_menu(lang)
                )
                await state.set_state(AdminMainMenuStates.main_menu)
                
            except Exception as e:
                print(f"Error creating export file: {str(e)}")
                await processing_msg.delete()
                await callback.message.answer(
                    f"‚ùå Export jarayonida xatolik yuz berdi:\n{str(e)}\n\n"
                    f"Iltimos, qayta urinib ko'ring." if lang == 'uz' else
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:\n{str(e)}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_main_menu(lang)
                )
                await state.set_state(AdminMainMenuStates.main_menu)
            
        except Exception as e:
            print(f"Error in export format handler: {str(e)}")
            await callback.message.answer(
                "‚ùå Export xatoligi yuz berdi" if lang == 'uz' else "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                reply_markup=get_admin_main_menu(lang)
            )
            await state.set_state(AdminMainMenuStates.main_menu)

    return router